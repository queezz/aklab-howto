{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lab How-To","text":"<p>This repo collects small, copy-pasteable recipes for daily work:</p> <ul> <li>\u2705 Git commits, tags, and installing from Git tags</li> <li>\u2705 Virtual environments on Windows/macOS/Linux</li> <li>\u2705 Minimal <code>pyproject.toml</code> and direct Git dependencies (PEP 508)</li> <li>\u2705 Release workflow without PyPI</li> </ul> <p>Tip: All code blocks have a copy button.</p>"},{"location":"analysis/notebooks/","title":"Notebooks","text":"<p>Guidance on organizing and running analysis notebooks.</p>"},{"location":"analysis/pandas/","title":"Pandas","text":"<p>Data wrangling with pandas: basics, APIs, and common patterns.</p>"},{"location":"analysis/plotting/","title":"Plotting","text":"<p>Data visualization concepts and example plots.</p>"},{"location":"analysis/stats/","title":"Stats","text":"<p>Statistical concepts and examples.</p>"},{"location":"cheatsheets/git/","title":"Git Cheatsheet","text":"<ul> <li>git status</li> <li>git add</li> <li>git commit</li> <li>git push</li> </ul>"},{"location":"cheatsheets/hardware/","title":"Hardware Cheatsheet","text":"<ul> <li>Quick references for hardware topics, sensors, and circuits.</li> </ul>"},{"location":"cheatsheets/linux/","title":"Linux Cheatsheet","text":"<ul> <li>Common commands and shortcuts for Linux environments.</li> </ul>"},{"location":"cheatsheets/python/","title":"Python Cheatsheet","text":"<ul> <li>Guess how to work with Python quickly: common commands, idioms, and tips.</li> </ul>"},{"location":"hardware/circuits/","title":"Circuits","text":"<p>Electronic circuit design and schematics.</p>"},{"location":"hardware/instruments/","title":"Instruments","text":"<p>Electronics instruments used in the lab.</p>"},{"location":"hardware/safety/","title":"Safety","text":"<p>Safety guidelines for handling lab equipment and experiments.</p>"},{"location":"hardware/sensors/","title":"Sensors","text":"<p>Sensor interfacing and data collection notes.</p>"},{"location":"lab/experiment-workflows/","title":"Experiment Workflows","text":"<p>Standard operating procedures for running experiments.</p>"},{"location":"lab/file-naming/","title":"File Naming","text":"<p>Best practices for naming files in the lab.</p>"},{"location":"lab/reproducibility/","title":"Reproducibility","text":"<p>Guidelines to ensure reproducible experiments and analyses.</p>"},{"location":"software/git/","title":"Commits &amp; Tags","text":""},{"location":"software/git/#minimal-commit-style-conventional-commits-lite","title":"Minimal commit style (Conventional Commits lite)","text":"<ul> <li><code>feat(vis133m): pixel/band maps + explicit time vector</code></li> <li><code>fix(wavecal): accept 0-based channel index</code></li> <li><code>docs: add quickstart</code></li> <li><code>chore(version): bump to 0.1.1</code></li> </ul> <p>Keep subjects short (\u226472 chars).</p>"},{"location":"software/git/#tag-a-release","title":"Tag a release","text":"<pre><code>git add -A\ngit commit -m \"chore(version): bump to 0.1.1\"\ngit tag -a v0.1.1 -m \"v0.1.1\"\ngit push --follow-tags\n</code></pre>"},{"location":"software/git/#install-from-a-git-tag-no-pypi","title":"Install from a Git tag (no PyPI)","text":"<pre><code>pip install \"git+https://github.com/you/yourrepo@v0.1.1\"\n</code></pre>"},{"location":"software/git/#fix-a-mistaken-tag","title":"Fix a mistaken tag","text":"<pre><code>git tag -d v0.1.1\ngit push origin :refs/tags/v0.1.1\n# re-tag the right commit, then push again\ngit tag -a v0.1.1 -m \"v0.1.1\" &lt;commit&gt;\ngit push origin v0.1.1\n</code></pre>"},{"location":"software/poetry/","title":"Poetry","text":"<p>Guidance on using Poetry for dependency management and packaging.</p>"},{"location":"software/python/","title":"Python","text":"<p>Overview of Python basics, environments, and packaging used in this handbook.</p> <p>Key topics: - Python basics and syntax - Dependency management - Project scaffolding and packaging</p>"},{"location":"software/python/#minimal-pyprojecttoml","title":"Minimal <code>pyproject.toml</code>","text":"<pre><code>[project]\nname = \"yourpkg\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11\"\ndependencies = [\"numpy&gt;=1.26\"]\n\n[project.urls]\nRepository = \"https://github.com/you/yourpkg\"\n\n[project.optional-dependencies]\ndev = [\n  \"mkdocs&gt;=1.6\",\n  \"mkdocs-material&gt;=9.5\",\n  \"pymdown-extensions&gt;=10.0\",\n  \"mdx_truly_sane_lists&gt;=1.0\",\n]\n</code></pre>"},{"location":"software/python/#git-dependency-pep-508","title":"Git dependency (PEP 508)","text":"<pre><code>[project]\ndependencies = [\n  \"specdata @ git+https://github.com/you/specdata@v0.2.0\",\n]\n</code></pre>"},{"location":"software/venv/","title":"Virtual Environments","text":"<p>Instructions for creating and using virtual environments across supported platforms.</p>"},{"location":"software/workflows/","title":"Workflows","text":"<p>This page consolidates release and development workflows.</p>"},{"location":"software/workflows/#releases-without-pypi","title":"Releases without PyPI","text":"<p>Flow - Bump version in <code>pyproject.toml</code> (SemVer). - Commit and tag:   <pre><code>git commit -am \"chore(version): bump to X.Y.Z\"\ngit tag -a vX.Y.Z -m \"vX.Y.Z\"\ngit push --follow-tags\n</code></pre> - Install from tag where needed:   <pre><code>pip install \"git+https://github.com/you/yourrepo@vX.Y.Z\"\n</code></pre></p> <p>Pre-releases - Tags like <code>v0.2.0-alpha.1</code>, <code>v0.2.0-rc.1</code> are fine. - Consumers can pin those tags explicitly.</p> <p>Optional: auto-version from tags Use <code>setuptools_scm</code>: <pre><code>[project]\ndynamic = [\"version\"]\n\n[tool.setuptools_scm]\nwrite_to = \"yourpkg/_version.py\"\n</code></pre></p>"}]}