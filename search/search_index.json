{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lab How-To","text":"<p>This repo collects small, copy-pasteable recipes for daily work:</p> <ul> <li>\u2705 Git commits, tags, and installing from Git tags</li> <li>\u2705 Virtual environments on Windows/macOS/Linux</li> <li>\u2705 Minimal <code>pyproject.toml</code> and direct Git dependencies (PEP 508)</li> <li>\u2705 Release workflow without PyPI</li> </ul> <p>Tip: All code blocks have a copy button.</p>"},{"location":"analysis/notebooks/","title":"Notebooks","text":"<p>Guidance on organizing and running analysis notebooks.</p>"},{"location":"analysis/pandas/","title":"Pandas","text":"<p>Data wrangling with pandas: basics, APIs, and common patterns.</p>"},{"location":"analysis/plotting/","title":"Plotting","text":"<p>Data visualization concepts and example plots.</p>"},{"location":"analysis/stats/","title":"Stats","text":"<p>Statistical concepts and examples.</p>"},{"location":"cheatsheets/git/","title":"Git Cheatsheet","text":"<ul> <li>git status</li> <li>git add</li> <li>git commit</li> <li>git push</li> </ul>"},{"location":"cheatsheets/hardware/","title":"Hardware Cheatsheet","text":"<ul> <li>Quick references for hardware topics, sensors, and circuits.</li> </ul>"},{"location":"cheatsheets/linux/","title":"Linux Cheatsheet","text":"<ul> <li>Common commands and shortcuts for Linux environments.</li> </ul>"},{"location":"cheatsheets/python/","title":"Python Cheatsheet","text":"<ul> <li>Guess how to work with Python quickly: common commands, idioms, and tips.</li> </ul>"},{"location":"hardware/KiCad/","title":"Quick-Start Workflow: Designing a PCB in KiCad","text":"<p>KiCad Official Site (Visit KiCad\u2019s website for downloads, libraries, documentation, and more.)</p>"},{"location":"hardware/KiCad/#1-schematics","title":"1. Schematics","text":"<ul> <li>Place component symbols from KiCad\u2019s library.</li> <li>Use <code>labels</code> for nets instead of drawing wires everywhere (wires are fine for simple or localized connections).</li> <li>For connectors, use <code>generic connector symbols</code> and apply specific footprints later.</li> </ul>"},{"location":"hardware/KiCad/#2-assign-footprints","title":"2. Assign Footprints","text":"<ul> <li>In the Schematic Editor, assign proper footprints (e.g., resistor sizes, connector types).</li> <li>Supports reuse of symbols with different footprints easily. (Reddit, KiCad Documentation)</li> </ul>"},{"location":"hardware/KiCad/#3-create-pcb-outline","title":"3. Create PCB Outline","text":"<ul> <li>Draw directly in the PCB Editor (<code>Pcbnew</code>) on the <code>Edge.Cuts</code> layer.  </li> <li>Import a DXF outline. Easy option: in Autodesk Inventor, export the flat face of a part as DXF.</li> </ul>"},{"location":"hardware/KiCad/#4-arrange-components","title":"4. Arrange Components","text":"<ul> <li>Place footprints thoughtfully: group connected components together, optimize routing paths, and place connectors conveniently along board edges.</li> </ul>"},{"location":"hardware/KiCad/#5-update-route","title":"5. Update &amp; Route","text":"<ul> <li>Use Tools \u2192 Update PCB from Schematic (F8) to sync the schematic with the board\u2014imports footprints and net connections. (KiCad Documentation, Build Electronic Circuits, KiCad Documentation)</li> <li>Route traces manually (or use the interactive router).</li> <li>Use labels and the \"ratsnest\" to guide connections visually.</li> <li>Optionally add copper fills like ground planes.</li> </ul>"},{"location":"hardware/KiCad/#6-validate-generate-outputs","title":"6. Validate &amp; Generate Outputs","text":"<ul> <li>Run DRC (Design Rule Check) to catch clearance, connectivity, or placement issues.</li> <li>Add silkscreen text, logos, or labels.</li> <li>Export your manufacturing files\u2014Gerbers, drill files, and possibly 3D models.</li> </ul>"},{"location":"hardware/KiCad/#one-page-cheat-sheet","title":"One-Page Cheat-Sheet","text":""},{"location":"hardware/KiCad/#kicad-pcb-quick-start-workflow","title":"KiCad PCB Quick Start Workflow","text":"<ol> <li> <p>Schematic    - Place symbols    - Use labels for nets; wires ok if simple    - Generic connectors \u2192 assign footprints later</p> </li> <li> <p>Assign Footprints    - Use schematic editor\u2019s footprint assignment tool</p> </li> <li> <p>Board Outline    - Open PCB Editor    - Import DXF into <code>Edge.Cuts</code> or draw manually</p> </li> <li> <p>Placement    - Arrange footprints to optimize routing    - Position connectors at edges</p> </li> <li> <p>Update &amp; Route    - <code>Update PCB from Schematic (F8)</code>    - Route traces using ratsnest    - Add copper fills (e.g., ground plane)</p> </li> <li> <p>Checks &amp; Outputs    - Run DRC    - Add silkscreen, labels, logos    - Export Gerber and manufacturing files</p> </li> </ol>"},{"location":"hardware/RasPi-pinout/","title":"Rasppbery Pi pinouts","text":"<p>RasPi Pinouts</p>"},{"location":"hardware/RasPi-pinout/#waveshare-hat","title":"Waveshare Hat","text":"<p>Waveshare AD/DA</p> <p></p>"},{"location":"hardware/RasPi-pinout/#spi","title":"SPI","text":""},{"location":"hardware/RasPi-pinout/#i2c","title":"I2C","text":""},{"location":"hardware/instruments/","title":"Instruments","text":"<p>Electronics instruments used in the lab.</p>"},{"location":"hardware/safety/","title":"Safety","text":"<p>Safety guidelines for handling lab equipment and experiments.</p>"},{"location":"hardware/sensors/","title":"Sensors","text":"<p>Sensor interfacing and data collection notes.</p>"},{"location":"hardware/controlunit/control-unit/","title":"Control Unit","text":"<p> Control Unit  Temperature Control</p> <p>Electronic modules used in our Countrol Unit. </p>"},{"location":"hardware/controlunit/control-unit/#control-unit-jungle","title":"Control Unit Jungle","text":""},{"location":"hardware/controlunit/high-precision-adda-board/","title":"High Precision AD/DA module","text":""},{"location":"hardware/controlunit/high-precision-adda-board/#about","title":"About","text":"<p>Dev Wiki Switch Science Shop Waveshare Shop</p> <p>Raspberry Pi High-Precision AD/DA Expansion Board</p>"},{"location":"hardware/controlunit/high-precision-adda-board/#whats-on-the-board","title":"What's on the board","text":"<ol> <li>Raspberry Pi GPIO interface : for connecting with the Pi</li> <li>AD/DA input/output : screw terminals</li> <li>AD input : pinheaders, the pinout is compatible with Waveshare sensor interface standard, easy to connect various analog sensor modules</li> <li>7.68M crystal</li> <li>LM285-2.5 : provides reference voltage for the ADC chip</li> <li>Photo resistor</li> <li>LED output indicator</li> <li>10K potentiometer</li> <li>DAC8552 : 16bit high-precision DAC, 2ch</li> <li>Power indicator</li> <li>ADS1256 : 24bit high-precision ADC, 8ch (4ch differential input)</li> <li>ADC testing jumper</li> <li>DAC testing jumper</li> <li>Power selection jumper</li> <li>ADC reference ground configuration : when AD single inputted, the AINCOM is reference terminal, can be connected to GND or external reference voltage</li> </ol>"},{"location":"hardware/controlunit/high-precision-adda-board/#pins","title":"Pins","text":"PIN SYMBOL DESCRIPTION 1, 17 3.3V Power supply (3.3V) 2, 4 5V Power supply (5V) 3, 5, 7, 8, 10, 18, 22, 24, 26, 27, 28, 29, 32, 36, 38, 40 NC NC 6, 9, 14, 20, 25, 30, 34, 39 GND Ground 11 DRDY ADS1256 data ready output, low active 12 RESET ADS1256 reset input 13 PDWN ADS1256 sync/power off input, low active 15 CS0 ADS1256 chip select, low active 16 CS1 DAC8552 chip select, low active 19 DIN SPI data input 21 DOUT SPI data output 23 SCK SPI clock 31, 33, 35, 37 GPIO Extend to sensor interface"},{"location":"hardware/controlunit/high-precision-adda-board/#dimensions","title":"Dimensions","text":""},{"location":"hardware/controlunit/y-corp-adc-board/","title":"AIO-32/0RA-IRC \u2013 I\u00b2C Analog Input Board","text":""},{"location":"hardware/controlunit/y-corp-adc-board/#about","title":"About","text":"<p>Board Home Python Dev Schematics</p> <p>I2C \u30a2\u30ca\u30ed\u30b0\u5165\u529b\u30dc\u30fc\u30c9 AIO-32/0RA-IRC by Y-Corporation</p> <p>An I\u00b2C-connected analog input board with 32 channels (16-bit resolution). Designed for use with Raspberry Pi and Jetson Nano as an expansion board.</p>"},{"location":"hardware/controlunit/y-corp-adc-board/#_1","title":"Y-corp ADC","text":""},{"location":"hardware/controlunit/y-corp-adc-board/#features","title":"Features","text":""},{"location":"hardware/controlunit/y-corp-adc-board/#input-range","title":"Input range","text":"<ul> <li>Single-ended: 0\u201310 V (only positive voltages accepted)  </li> <li>Differential: \u00b110 V (AIN+ and AIN\u2013 must still be \u22650 V)</li> </ul>"},{"location":"hardware/controlunit/y-corp-adc-board/#gain-settings","title":"Gain settings","text":"<ul> <li>selectable full-scale ranges  </li> <li>\u00b110 V, \u00b15 V, \u00b12.5 V, \u00b11.25 V</li> </ul>"},{"location":"hardware/controlunit/y-corp-adc-board/#channel-modes","title":"Channel modes","text":"<ul> <li>32 single-ended inputs  </li> <li>16 differential inputs</li> </ul>"},{"location":"hardware/controlunit/y-corp-adc-board/#misc","title":"Misc","text":"<ul> <li>Stackable, works with Raspberry Pi 5/4/3/2/Zero, Jetson Nano, and Y2 I\u00b2C boards  </li> <li>I\u00b2C bus voltage: 3.3 V  </li> <li>Power: 5 V DC, &lt;10 mA  </li> <li>Operating conditions: 0\u201350 \u00b0C, 10\u201390% RH (non-condensing)  </li> <li>Compliance: RoHS2 (10 substances)</li> </ul>"},{"location":"hardware/controlunit/y-corp-adc-board/#included-accessories","title":"Included Accessories","text":"<ul> <li>4\u00d7 spacers (M2.6, 12 mm, male\u2013female, metal)  </li> <li>4\u00d7 screws  </li> <li>4\u00d7 nuts  </li> <li>1\u00d7 connector pin protective cover (for J1)</li> </ul>"},{"location":"hardware/controlunit/y-corp-adc-board/#internal-components","title":"Internal Components","text":"<ul> <li>ADS1115 \u2013 16-bit A/D converter  </li> <li>CD74HC4067 \u2013 multiplexer  </li> <li>PCA9554C \u2013 I/O expander  </li> <li>XG4C-3434 / J1 \u2013 connectors</li> </ul> <p>ADS1113 \u2013 TI ADS1115 \u2013 TI CD74HC4067 \u2013 TI </p> <p>PCA9554B / PCA9554C \u2013 NXP XG4 Connector \u2013 Omron</p>"},{"location":"lab/experiment-workflows/","title":"Experiment Workflows","text":"<p>Standard operating procedures for running experiments.</p>"},{"location":"lab/file-naming/","title":"File Naming","text":"<p>Best practices for naming files in the lab.</p>"},{"location":"lab/reproducibility/","title":"Reproducibility","text":"<p>Guidelines to ensure reproducible experiments and analyses.</p>"},{"location":"software/poetry/","title":"Poetry","text":"<p>Poetry is a modern tool for managing Python projects. It combines dependencies, virtual environments, packaging, and publishing in one workflow.</p> <ul> <li>Tracks dependencies in <code>pyproject.toml</code></li> <li>Creates &amp; manages virtual environments automatically</li> <li>Produces reproducible installs with <code>poetry.lock</code></li> <li>Builds and publishes packages to PyPI</li> </ul>"},{"location":"software/poetry/#why-use-it","title":"Why use it","text":"<ul> <li>Cleaner than juggling <code>pip</code> + <code>requirements.txt</code> + <code>setup.py</code></li> <li>Built-in dependency resolver avoids version conflicts</li> <li>One file (<code>pyproject.toml</code>) describes your whole project</li> <li>Straightforward publishing with <code>poetry build</code> and <code>poetry publish</code></li> </ul>"},{"location":"software/poetry/#when-to-use","title":"When to use","text":"<ul> <li>Libraries or apps you\u2019ll distribute</li> <li>Collaborative projects where reproducibility matters</li> <li>Projects with dependencies you want tracked cleanly</li> </ul> <p>For quick one-off scripts \u2192 a bare venv with <code>pip install</code> is simpler. For real, long-lived projects \u2192 use Poetry.</p>"},{"location":"software/poetry/#quickstart","title":"Quickstart","text":"<pre><code># install (recommended via pipx)\npipx install poetry\n\n# create a project\npoetry new myproject\ncd myproject\n\n# add dependencies\npoetry add requests pandas\n\n# run inside Poetry\u2019s venv\npoetry run python main.py\n\n# build &amp; publish\npoetry build\npoetry publish\n</code></pre>"},{"location":"software/poetry/#venv-pip-vs-poetry","title":"venv + pip vs Poetry","text":"<p>TL;DR</p> <ul> <li>venv + pip \u2192 quick scripts, small projects, teaching basics</li> <li>Poetry \u2192 distributable packages, reproducible installs, CI/CD, publishing</li> </ul> Topic venv + pip Poetry Dependency file <code>requirements.txt</code> or <code>pyproject.toml</code> (PEP 621 support) <code>pyproject.toml</code> + <code>poetry.lock</code> Env management You create/activate manually Poetry auto-creates and manages Resolver pip resolver, fewer safeguards strict resolver prevents conflicts Build/publish <code>build</code>, <code>twine</code> (extra tools) <code>poetry build</code>, <code>poetry publish</code> built-in Reproducibility Pin manually with <code>pip freeze</code> or constraints Lockfile by default Learning curve Very low Moderate"},{"location":"software/poetry/#typical-workflow","title":"Typical workflow","text":"<p>1) Create project</p> <p>venv + pip</p> <pre><code>py -3.12 -m venv .venv   # Windows\n.\\.venv\\Scripts\\Activate.ps1\n\npython3 -m venv .venv    # macOS/Linux\nsource .venv/bin/activate\n\npython -m pip install -U pip\npip install requests pandas\npip freeze &gt; requirements.txt\n</code></pre> <p>Poetry</p> <pre><code>pipx install poetry\npoetry new myproject\ncd myproject\npoetry add requests pandas\n</code></pre> <p>2) Run code</p> <p>venv + pip</p> <pre><code>python app.py\n</code></pre> <p>Poetry</p> <pre><code>poetry run python app.py\npoetry shell   # optional subshell\n</code></pre> <p>3) Pin / reproduce</p> <p>venv + pip</p> <pre><code>pip freeze &gt; requirements.txt\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>Poetry</p> <pre><code>poetry lock\npoetry install\n</code></pre> <p>4) Build / publish</p> <p>venv + pip</p> <pre><code>pip install build twine\npython -m build\ntwine upload dist/*\n</code></pre> <p>Poetry</p> <pre><code>poetry build\npoetry publish\n</code></pre>"},{"location":"software/poetry/#vs-code-integration","title":"VS Code integration","text":"<ul> <li>venv + pip</li> </ul> <ul> <li>Pick <code>.venv</code> manually (<code>Python: Select Interpreter</code>).</li> <li> <p>Example <code>.vscode/settings.json</code>:</p> <pre><code>{ \"python.defaultInterpreterPath\": \".venv/bin/python\" }\n</code></pre> <p>On Windows:</p> <pre><code>{ \"python.defaultInterpreterPath\": \".venv\\\\Scripts\\\\python.exe\" }\n</code></pre> </li> </ul> <ul> <li>Poetry</li> </ul> <pre><code>poetry env info --path\n</code></pre> <p>Point VS Code there, or let it auto-detect.   For project-local venvs:</p> <pre><code>poetry config virtualenvs.in-project true\npoetry install\n</code></pre>"},{"location":"software/poetry/#pros-cons","title":"Pros &amp; cons","text":"<p>venv + pip</p> <ul> <li>\u2705 Standard library only, minimal</li> <li>\u2705 Great for teaching, tiny repos</li> <li>\u274c Manual pinning/version drift</li> <li>\u274c Extra tools needed for publishing</li> </ul> <p>Poetry</p> <ul> <li>\u2705 Single source of truth (<code>pyproject.toml</code>)</li> <li>\u2705 Reproducible installs (<code>poetry.lock</code>)</li> <li>\u2705 Built-in build/publish, extras, scripts</li> <li>\u274c Slight learning curve, heavy for small scripts</li> </ul>"},{"location":"software/poetry/#choosing-guide","title":"Choosing guide","text":"<ul> <li>One script, few deps \u2192 venv + pip</li> <li>Full project, team, CI/CD \u2192 Poetry</li> <li>Teaching basics \u2192 venv + pip</li> <li>Lab/course notebooks (many students) \u2192 Poetry (lockfile avoids drift)</li> </ul>"},{"location":"software/poetry/#migration","title":"Migration","text":"<pre><code>pipx install poetry\npoetry init\npoetry add $(sed 's/==.*//' requirements.txt)\npoetry install\npoetry config virtualenvs.in-project true  # optional\npoetry install\n</code></pre> <p>Export a requirements file for legacy tools:</p> <pre><code>poetry export -f requirements.txt --output requirements.txt --without-hashes\n</code></pre>"},{"location":"software/poetry/#common-pitfalls","title":"Common pitfalls","text":"<ul> <li>Multiple Pythons \u2192</li> </ul> <p><pre><code>poetry env use python3.12\n</code></pre> * VS Code picking wrong interpreter \u2192 point to Poetry\u2019s venv path * Corporate firewall \u2192 configure <code>POETRY_HTTP_BASIC_*</code> creds or stay with pip * Editable local installs \u2192</p> <pre><code>poetry add --editable .\n</code></pre>"},{"location":"software/pypackage/","title":"Python Package","text":"<p>Overview of Python basics, environments, and packaging used in this handbook.</p> <p>Key topics: - Python basics and syntax - Dependency management - Project scaffolding and packaging</p>"},{"location":"software/pypackage/#minimal-pyprojecttoml","title":"Minimal <code>pyproject.toml</code>","text":"<pre><code>[project]\nname = \"yourpkg\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11\"\ndependencies = [\"numpy&gt;=1.26\"]\n\n[project.urls]\nRepository = \"https://github.com/you/yourpkg\"\n\n[project.optional-dependencies]\ndev = [\n  \"mkdocs&gt;=1.6\",\n  \"mkdocs-material&gt;=9.5\",\n  \"pymdown-extensions&gt;=10.0\",\n  \"mdx_truly_sane_lists&gt;=1.0\",\n]\n</code></pre>"},{"location":"software/pypackage/#git-dependency-pep-508","title":"Git dependency (PEP 508)","text":"<pre><code>[project]\ndependencies = [\n  \"specdata @ git+https://github.com/you/specdata@v0.2.0\",\n]\n</code></pre>"},{"location":"software/venv/","title":"Virtual Environments (venv) \u2014 Quick Intro","text":""},{"location":"software/venv/#what-is-a-venv","title":"What is a venv?","text":"<p>A virtual environment is a self-contained folder with its own Python interpreter and libraries. It keeps each project\u2019s dependencies isolated \u2014 so updating one project won\u2019t break another.</p> <p>\ud83d\udc49 Official docs</p>"},{"location":"software/venv/#when-to-use-it","title":"When to use it","text":"<ul> <li>Always if a project needs extra Python packages.</li> <li>Collaboration: teammates install the same dependencies in their own venv.</li> <li>Deployment: reproducible installs.</li> </ul>"},{"location":"software/venv/#basic-usage","title":"Basic usage","text":""},{"location":"software/venv/#1-create-and-activate","title":"1. Create and activate","text":"<p>Windows (PowerShell)</p> <pre><code>python -m venv .venv\n.\\\\.venv\\\\Scripts\\\\Activate.ps1\n</code></pre> <p>macOS / Linux (bash)</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"software/venv/#2-upgrade-pip","title":"2. Upgrade pip","text":"<pre><code>python -m pip install -U pip\n</code></pre>"},{"location":"software/venv/#3-install-dependencies","title":"3. Install dependencies","text":"<p>Case A: <code>pyproject.toml</code></p> <pre><code>[project]\ndependencies = [\"numpy\", \"requests\"]\n\n[project.optional-dependencies]\ndev = [\"pytest\", \"black\"]\n</code></pre> <p>Install both runtime + dev tools:</p> <pre><code>python -m pip install -e \".[dev]\"\n</code></pre> <p>\ud83d\udca1 <code>\".[dev]\"</code> means: install this project (<code>\".\"</code>) + optional dev dependencies (<code>[dev]</code>).</p> <p>Case B: <code>requirements.txt</code></p> <pre><code>python -m pip install -r requirements.txt\n</code></pre>"},{"location":"software/venv/#4-deactivate","title":"4. Deactivate","text":"<pre><code>deactivate\n</code></pre>"},{"location":"software/venv/#external-venv-in-vs-code","title":"External venv in VS Code","text":"<ol> <li>Create venv outside repo, e.g. <code>~/.venvs/example-app</code>.</li> </ol> <ul> <li>Windows: <code>C:\\Users\\&lt;you&gt;\\.venvs\\example-app\\Scripts\\python.exe</code></li> <li>macOS/Linux: <code>/home/&lt;you&gt;/.venvs/example-app/bin/python</code></li> </ul> <ol> <li>Point VS Code to it via <code>.vscode/settings.json</code>:</li> </ol> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${env:USERPROFILE}\\\\.venvs\\\\example-app\\\\Scripts\\\\python.exe\"\n}\n</code></pre> <p>(on Windows)</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${env:HOME}/.venvs/example-app/bin/python\"\n}\n</code></pre> <p>(on macOS/Linux)</p> <ol> <li>Result: VS Code uses that interpreter for terminals, debugging, and Jupyter \u2014 without hardcoding usernames.</li> </ol>"},{"location":"software/venv/#daily-workflow","title":"Daily workflow","text":""},{"location":"software/venv/#windows","title":"Windows","text":"<p>Inside repo venv</p> <pre><code>.\\\\.venv\\\\Scripts\\\\Activate.ps1\npython -m pip install -e \".[dev]\"   # only once or when deps change\n</code></pre> <p>Using external venv</p> <pre><code>&amp; $env:USERPROFILE\\.venvs\\example-app\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"software/venv/#macos-linux","title":"macOS / Linux","text":"<p>Inside repo venv</p> <pre><code>source .venv/bin/activate\npython -m pip install -e \".[dev]\"   # only once or when deps change\n</code></pre> <p>Using external venv</p> <p><pre><code>source ~/.venvs/example-app/bin/activate\n</code></pre> Then run Python as usual (<code>python</code>, <code>pytest</code>, etc.). Exit with <code>deactivate</code>.</p>"},{"location":"software/workflows/","title":"Workflows","text":"<p>This page consolidates release and development workflows.</p>"},{"location":"software/workflows/#releases-without-pypi","title":"Releases without PyPI","text":"<p>Flow - Bump version in <code>pyproject.toml</code> (SemVer). - Commit and tag:   <pre><code>git commit -am \"chore(version): bump to X.Y.Z\"\ngit tag -a vX.Y.Z -m \"vX.Y.Z\"\ngit push --follow-tags\n</code></pre> - Install from tag where needed:   <pre><code>pip install \"git+https://github.com/you/yourrepo@vX.Y.Z\"\n</code></pre></p> <p>Pre-releases - Tags like <code>v0.2.0-alpha.1</code>, <code>v0.2.0-rc.1</code> are fine. - Consumers can pin those tags explicitly.</p> <p>Optional: auto-version from tags Use <code>setuptools_scm</code>: <pre><code>[project]\ndynamic = [\"version\"]\n\n[tool.setuptools_scm]\nwrite_to = \"yourpkg/_version.py\"\n</code></pre></p>"},{"location":"software/git/commits/","title":"Git Commit Culture","text":""},{"location":"software/git/commits/#why-it-matters","title":"Why it matters","text":"<p>Commits are not just for you \u2014 they are the history your collaborators (and your future self) will read. A clean history makes debugging and reviewing easier.</p>"},{"location":"software/git/commits/#conventional-commits-lite","title":"Conventional Commits (lite)","text":"<p>Use a short, structured format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre> <p>Examples:</p> <ul> <li><code>feat(vis133m): pixel/band maps + explicit time vector</code></li> <li><code>fix(wavecal): accept 0-based channel index</code></li> <li><code>docs: add quickstart</code></li> <li><code>chore(version): bump to 0.1.1</code></li> </ul> <p>Types: feat, fix, docs, chore, refactor, test, build, ci. Scope: optional, but helps (<code>venv</code>, <code>mkdocs</code>, <code>wavecal</code>). Subject: imperative, \u226472 chars.</p>"},{"location":"software/git/commits/#commit-hygiene","title":"Commit hygiene","text":"<ul> <li>One logical change per commit (atomic).</li> <li>Tiny commits are fine \u2014 they show the story.</li> <li>Push when ready \u2192 avoids spamming CI (like GitHub Pages).</li> <li>Commit body (optional): explain why, not just what.</li> <li>Breaking changes \u2192</li> </ul> <p><pre><code>BREAKING CHANGE: old flag removed; use --foo instead\n</code></pre> * Reference issues/PRs \u2192 <code>Fixes #123</code>.</p>"},{"location":"software/git/commits/#daily-flow","title":"Daily flow","text":"<pre><code># work in small commits\ngit add -A\ngit commit -m \"feat(venv): add explainer draft\"\ngit commit -m \"fix(venv): typos\"\ngit commit -m \"docs(venv): reorder sections\"\n\n# clean up before pushing\ngit rebase -i HEAD~3   # squash/fixup\ngit push\n</code></pre>"},{"location":"software/git/commits/#squash-amend","title":"Squash &amp; Amend","text":"<ul> <li>Amend last commit:</li> </ul> <p><pre><code>git add &lt;files&gt;\ngit commit --amend\n</code></pre> * Squash multiple commits:</p> <p><pre><code>git rebase -i HEAD~N\n</code></pre> * Fixup autosquash:</p> <pre><code>git commit --fixup=&lt;sha&gt;\ngit rebase -i --autosquash HEAD~N\n</code></pre>"},{"location":"software/git/commits/#roll-back-recent","title":"Roll back recent","text":"<p><pre><code>git reset --soft HEAD~1\n</code></pre> Roll back one local commit and keep All edits: <pre><code>git reset --mixed HEAD~1\n</code></pre></p> <p>--soft: Removes the commit, but leaves all changes staged (in the index, as if you had already run git add). \u2192 You can immediately run git commit again without re-adding files.</p> <p>--mixed (default): Removes the commit, unstages the changes but keeps them in your working directory. \u2192 You\u2019ll see the edits as \u201cmodified\u201d and can choose what to git add before committing again.</p> <p>--hard: Removes the commit and throws away the changes completely. \u2192 Nothing left in working directory.</p>"},{"location":"software/git/intro/","title":"Git Intro","text":""},{"location":"software/git/intro/#what-is-git","title":"What is Git?","text":"<p>Git is a version control system \u2014 it keeps a timeline of your project. Every commit is a snapshot you can revisit, compare, or branch off. Think of it as a time machine for code and docs.</p>"},{"location":"software/git/intro/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a service that hosts Git repositories and adds:</p> <ul> <li>Collaboration (issues, pull requests, reviews).</li> <li>Automation (GitHub Actions).</li> <li>Hosting (GitHub Pages \u2014 what powers this site).</li> </ul> <p>There are alternatives: GitLab, Bitbucket, Gitea, SourceHut\u2026. We\u2019re living on GitHub because it\u2019s the standard, and GitHub Pages makes publishing easy.</p>"},{"location":"software/git/intro/#first-steps","title":"First steps","text":"<p>When you create a repo on GitHub, it shows you a block of ready-to-use commands (init, add remote, push). Copy those into your shell the first time. After that, your daily flow is just:</p> <pre><code>git add -A\ngit commit -m \"message\"\ngit push\n</code></pre>"},{"location":"software/git/versioning/","title":"Versioning &amp; Releases","text":""},{"location":"software/git/versioning/#semantic-versioning-semver","title":"Semantic Versioning (SemVer)","text":"<p>We use MAJOR.MINOR.PATCH:</p> <ul> <li>MAJOR \u2192 breaking changes.   Remove a function, change API.</li> <li>MINOR \u2192 new features, backwards-compatible.   Add function, optional args, new docs.</li> <li>PATCH \u2192 bug fixes, backwards-compatible.   Fix bug, typo, refactor.</li> </ul> <p>Examples:</p> <ul> <li><code>1.4.2</code> \u2192 major 1, minor 4, patch 2.</li> <li><code>2.0.0</code> \u2192 breaking changes.</li> <li><code>2.1.0</code> \u2192 new features.</li> <li><code>2.1.1</code> \u2192 bug fix.</li> </ul>"},{"location":"software/git/versioning/#tagging-a-release","title":"Tagging a release","text":"<pre><code>git add -A\ngit commit -m \"chore(version): bump to 0.1.1\"\ngit tag -a v0.1.1 -m \"v0.1.1\"\ngit push --follow-tags\n</code></pre> <p>\ud83d\udc49 Keep tag = version in <code>pyproject.toml</code>.</p>"},{"location":"software/git/versioning/#installing-from-a-git-tag","title":"Installing from a Git tag","text":"<pre><code>pip install \"git+https://github.com/you/yourrepo@v0.1.1\"\n</code></pre>"},{"location":"software/git/versioning/#fixing-a-mistaken-tag","title":"Fixing a mistaken tag","text":"<pre><code>git tag -d v0.1.1\ngit push origin :refs/tags/v0.1.1\n# re-tag the correct commit\ngit tag -a v0.1.1 -m \"v0.1.1\" &lt;commit&gt;\ngit push origin v0.1.1\n</code></pre>"}]}